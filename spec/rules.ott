%%Challenge: A & ( B | C ) <: ( A & B ) | ( A & C )
%%Workaround: ignore it.
%%* omit record types

%%--------------------------------------------------------------

%%Type

%%OrdinaryType   A, B, C, D ::= Int | Top | Bot | A -> B | A & B | A \/ B

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR (LNgen portion)

grammar

typ, A, B, C, D, char {{ tex \mathsf{Char} }}, bool {{ tex \mathsf{Bool} }} % , ll {{ tex \{ l \} }}
  :: 't_'             ::=                  {{ com types }}
  | int               ::   :: int          {{ com int }} {{ tex \mathsf{Int} }}
  | Top               ::   :: top          {{ com top type }} {{ tex \mathsf{Top} }}
  | Bot               ::   :: bot          {{ com bottom type }} {{ tex \mathsf{Bot} }}
  | A -> B            ::   :: arrow        {{ com function types }}
  | A & B             ::   :: and          {{ com intersection }}
  | A \/ B            ::   :: or           {{ com union }}
  | ( A )             :: S :: paren        {{ coq [[A]] }}
%  | { l : A }         ::   :: rcd          {{ com record }}
  | | mode |          :: S :: topbot       {{ coq (typbymode [[mode]]) }}
  | [ A mode B ]      :: S :: choose       {{ coq (operatorbymode [[mode]] [[A]] [[B]]) }}


mode {{ tex \Diamond }}
  :: 'm_'             ::=
  | sub               ::   :: sub          {{ tex <: }}
  | super             ::   :: super        {{ tex :> }}
  | ! mode            :: S :: flip         {{ tex \overline{[[mode]]} }} {{ coq (flipmode [[mode]]) }}

parsing
  t_or <= t_and
  t_arrow <= t_or
  t_arrow <= t_and
  t_arrow right t_arrow
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR  (non LNgen portion)

grammar


terminals :: 'terminals_' ::=
  | ->               ::  :: arrow      {{ tex \rightarrow }}
  | &                ::  :: and        {{ tex \, \& \, }}
  | \/               ::  :: or         {{ tex \, \mid \, }}
  | ,                ::  :: break      {{ tex , }}
  | <:b              ::  :: subb       {{ tex <: }}
  | <::              ::  :: subd       {{ tex <: }}
  | ||-              ::  :: turnstileb {{ tex \vdash }}
  | |-&              ::  :: wfCombined {{ tex \vdash_{\&} }}
  | <|               ::  :: triangleL  {{ tex \mathbin{\lhd} }}
  | |>               ::  :: triangleR  {{ tex \mathbin{\rhd} }}


formula :: 'formula_' ::=
  | judgement        ::   :: judgement
  | not formula      :: M :: not
    {{ tex \neg [[formula]] }}
    {{ coq not ([[formula]]) }}
  | ( formula )      :: M :: brackets
    {{ tex ([[formula]]\!) }}
    {{ coq [[formula]] }}
  | < formula >              :: M :: high_form
    {{ tex \hlmath{[[formula]]} }}
    {{ coq [[formula]] }}
  | l1 <> l2                 ::   :: label
    {{ coq [[l1]] <> [[l2]] }}
    {{ tex [[l1]] \neq [[l2]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

embed
{{ coq

Definition flipmode (m: mode) :=
  match m with
  | m_sub => m_super
  | m_super => m_sub
  end.
  
Definition typbymode (m: mode) :=
  match m with
  | m_sub => t_top
  | m_super => t_bot
  end.
  
Definition operatorbymode (m: mode) (A: typ) (B: typ) :=
  match m with
  | m_sub => t_and A B
  | m_super => t_or A B
  end.

}}

defns
OSubtyping :: '' ::=

defn
A < mode > B  :: :: osub :: OS_
{{ com Original BCD Declarative Subtyping - Top-Like + Unions }}
{{ tex [[A]] [[mode]] [[B]] }}
by


---------------------- :: refl
A < mode > A


A < mode >  B
B < mode > C
--------------- :: trans
A < mode > C


------------------ :: top
A < mode > |mode|


%--------------------------- :: topArr
%Top < Top -> Top


%------------------------------- :: topRcd
%Top < { l : Top }


%--------------------------- :: botArr
%Bot < A -> Bot


%------------------------------- :: botRcd
%{ l : Bot } < Bot


A < ! mode > B
C < mode >  D
------------------------ :: arr
A -> C < mode > B -> D


A < mode > B
A < mode > C
---------------------- :: and
A < mode > [B mode C]


------------------------- :: andl
[A mode B] < mode > A


------------------------- :: andr
[A mode B] < mode > B


A < mode > C
B < mode > C
------------------------- :: or
[A ! mode B] < mode > C


------------------------- :: orl
A  < mode > [A ! mode B]


------------------------- :: orr
B < mode > [A ! mode B]


--------------------------------------- :: distArr
(A -> B) & (A -> C) < sub > A -> B & C


--------------------------------------- :: distArrU
(A -> C) & (B -> C) < sub > A \/ B -> C


%-------------------------------------- :: distAnd
%(B1 \/ B2) & A < (B1 & A) \/ (B2 & A)


--------------------------------------------- :: distOr
(A1 \/ B) & (A2 \/ B) < sub > (A1 & A2) \/ B


%A < B
%-------------------------------------------- :: rcd
%{ l : A } < { l : B }


%--------------------------------------------------- :: distRcd
%{ l : A } & { l : B } < { l : A & B }


B  < ! mode > A
------------------------- :: flip
A  < mode > B


defns
OrdinaryType :: '' ::=

defn
ordinary A :: :: ord :: O_
{{ com Ordinary Types }}
{{ tex [[A]]~\mathsf{Ordinary} }}
by


---------------- :: top
ordinary Top


---------------- :: bot
ordinary Bot


---------------- :: int
ordinary int


ordinaryU A
ordinary B
---------------- :: arrow
ordinary A->B


ordinary A
ordinary B
---------------- :: or
ordinary A\/B


%ordinary B
%---------------- :: rcd
%ordinary {l:B}


defn
ordinaryU A :: :: ordu :: OU_
{{ com Ordinary Types (for unions) }}
{{ tex [[A]]~\mathsf{OrdinaryU} }}
by


---------------- :: top
ordinaryU Top


---------------- :: bot
ordinaryU Bot


---------------- :: int
ordinaryU int


---------------- :: arrow
ordinaryU A->B


% (A1\/A2)&(B1\/B2) ~= (A1&(B1\/B2)) \/ (A2&(B1\/B2))

ordinaryU A
ordinaryU B
---------------- :: and
ordinaryU A&B


%ordinaryU B
%---------------- :: rcd
%ordinaryU {l:B}



defns
SplitType :: '' ::=

defn
split A B C :: :: spl :: Sp_
{{ com Splittable Types }}
{{ tex [[B]] \mathbin{\lhd} [[A]] \mathbin{\rhd} [[C]] }}
by


----------------:: and
split A&B A B


split B C D
-------------------------- :: arrow
split A->B A->C A->D


%split B C D
%-------------------------- :: rcd
%split {l:B} {l:C} {l:D}


ordinary D
splitU A B C
-------------------------- :: arrowUnion
split A->D B->D C->D


split A A1 A2
-------------------------- :: orl
split A\/B A1\/B A2\/B


ordinary A
split B B1 B2
-------------------------- :: orr
split A\/B A\/B1 A\/B2



defn
splitU A B C :: :: splu :: SpU_
{{ com Split Union Types }}
{{ tex [[B]] \mathbin{\LHD} [[A]] \mathbin{\RHD} [[C]] }}
by


--------------------:: or
splitU A\/B A B


%splitU B C D
%--------------------------- :: arrow
%splitU A->B A->C A->D


%splitU B C D
%-------------------------- :: rcd
%splitU {l:B} {l:C} {l:D}


% (A1\/A2)&(B1\/B2) ~= (A1&(B1\/B2)) \/ (A2&(B1\/B2))

splitU A A1 A2
-------------------------- :: andl
splitU A&B A1&B A2&B


ordinaryU A
splitU B B1 B2
-------------------------- :: andr
splitU A&B A&B1 A&B2



defns
Subtyping :: '' ::=

defn
A <: B  :: :: sub :: S_
{{ com Algorithmic Subtyping }}
by


---------------------- :: int
int <: int


--------------- :: top
A <: Top


--------------- :: bot
Bot <: A


ordinary C
split D A B
A <: C
------------------------- :: andl
D <: C


ordinary C
split D A B
B <: C
----------------- :: andr
D <: C


% A1\/A2 & B <: B
% seems can be covered by other rules?

% splitu A A1 A2
% A1 <: B
% A2 <: B
% ----------------- :: or
% A <: B


ordinary A\/B
A <: D
B <: D
----------------- :: or
A\/B <: D


ordinary B\/C
A <: B
--------------- :: orl
A <: B \/ C


ordinary B\/C
A <: C
--------------- :: orr
A <: B \/ C


ordinary A -> C
ordinary B -> D
B <: A
C <: D
------------------------ :: arr
A -> C <: B -> D


%% when the right type can be split in the intersection way,
%% both parts have to be supertypes of the left one

split D B C
A <: B
A <: C
--------------- :: and
A <: D
