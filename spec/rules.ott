%%Challenge: A & ( B | C ) <: ( A & B ) | ( A & C )
%%Workaround: ignore it.
%%* omit record types

%%--------------------------------------------------------------

%%Type

%%OrdinaryType   A, B, C, D ::= Int | Top | Bot | A -> B | A & B | A \/ B

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR (LNgen portion)

grammar

typ, A, B, C, D, char {{ tex \mathsf{Char} }}, bool {{ tex \mathsf{Bool} }} % , ll {{ tex \{ l \} }}
  :: 't_'             ::=                  {{ com types }}
  | int               ::   :: int          {{ com int }} {{ tex \mathsf{Int} }}
  | Top               ::   :: top          {{ com top type }} {{ tex \mathsf{Top} }}
  | Bot               ::   :: bot          {{ com bottom type }} {{ tex \mathsf{Bot} }}
  | A -> B            ::   :: arrow        {{ com function types }}
  | A & B             ::   :: and          {{ com intersection }}
  | A \/ B            ::   :: or           {{ com union }}
  | ( A )             :: S :: paren        {{ coq [[A]] }}
%  | { l : A }         ::   :: rcd          {{ com record }}
  | | mode |          :: S :: topbot       {{ coq (typbymode [[mode]]) }}
  | [ A mode B ]      :: S :: choose       {{ coq (choose [[mode]] [[A]] [[B]]) }}


mode {{ tex \Diamond }}, m {{ tex \Diamond }}
  :: 'm_'             ::=
  | sub               ::   :: sub          {{ tex < }}
  | super             ::   :: super        {{ tex > }}
  | ! mode            :: S :: flip         {{ tex \overline{[[mode]]} }} {{ coq (flipmode [[mode]]) }}

parsing
  t_or <= t_and
  t_arrow <= t_or
  t_arrow <= t_and
  t_arrow right t_arrow
  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR  (non LNgen portion)

grammar


terminals :: 'terminals_' ::=
  | ->               ::  :: arrow      {{ tex \rightarrow }}
  | &                ::  :: and        {{ tex \, \& \, }}
  | \/               ::  :: or         {{ tex \, \mid \, }}
  | ,                ::  :: break      {{ tex , }}
  | <:b              ::  :: subb       {{ tex <: }}
  | <::              ::  :: subd       {{ tex <: }}
  | ||-              ::  :: turnstileb {{ tex \vdash }}
  | |-&              ::  :: wfCombined {{ tex \vdash_{\&} }}
  | <|               ::  :: triangleL  {{ tex \mathbin{\lhd} }}
  | |>               ::  :: triangleR  {{ tex \mathbin{\rhd} }}


formula :: 'formula_' ::=
  | judgement        ::   :: judgement
  | not formula      :: M :: not
    {{ tex \neg [[formula]] }}
    {{ coq not ([[formula]]) }}
  | ( formula )      :: M :: brackets
    {{ tex ([[formula]]\!) }}
    {{ coq [[formula]] }}
  | < formula >              :: M :: high_form
    {{ tex \hlmath{[[formula]]} }}
    {{ coq [[formula]] }}
  | l1 <> l2                 ::   :: label
    {{ coq [[l1]] <> [[l2]] }}
    {{ tex [[l1]] \neq [[l2]] }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

embed
{{ coq

Definition flipmode (m: mode) :=
  match m with
  | m_sub => m_super
  | m_super => m_sub
  end.
  
Definition typbymode (m: mode) :=
  match m with
  | m_sub => t_top
  | m_super => t_bot
  end.
  
Definition choose (m: mode) (A: typ) (B: typ) :=
  match m with
  | m_sub => t_and A B
  | m_super => t_or A B
  end.

}}

defns
OSubtyping :: '' ::=

defn
A < mode > B  :: :: osub :: OS_
{{ com Original BCD Declarative Subtyping - Top-Like + Unions }}
{{ tex [[A]] [[mode]] [[B]] }}
by


---------------------- :: refl
A < mode > A


A < mode >  B
B < mode > C
--------------- :: trans
A < mode > C


------------------ :: top
A < mode > |mode|


A < ! mode > B
C < mode >  D
------------------------ :: arr
A -> C < mode > B -> D


A < mode > B
A < mode > C
---------------------- :: and
A < mode > [B mode C]


------------------------- :: andl
[A mode B] < mode > A


------------------------- :: andr
[A mode B] < mode > B


A < mode > C
B < mode > C
------------------------- :: or
[A ! mode B] < mode > C


------------------------- :: orl
A  < mode > [A ! mode B]


------------------------- :: orr
B < mode > [A ! mode B]


--------------------------------------- :: distArr
(A -> B) & (A -> C) < sub > A -> B & C


--------------------------------------- :: distArrU
(A -> C) & (B -> C) < sub > A \/ B -> C


%-------------------------------------- :: distAnd
%(B1 \/ B2) & A < (B1 & A) \/ (B2 & A)


--------------------------------------------- :: distOr
(A1 \/ B) & (A2 \/ B) < sub > (A1 & A2) \/ B


B  < ! mode > A
------------------------- :: flip
A  < mode > B


defns
OrdinaryType :: '' ::=

defn
ordinary m A :: :: ord :: O_
{{ com Ordinary Types }}
{{ tex [[A]]~\mathsf{Ordinary}_{[[m]]} }}
by


---------------- :: top
ordinary m Top


---------------- :: bot
ordinary m Bot


---------------- :: int
ordinary m int


--------------------- :: arrowUnion
ordinary super A->B


ordinary super  A
ordinary sub B
--------------------- :: arrow
ordinary sub A->B


ordinary m A
ordinary m B
--------------------- :: or
ordinary m [A !m B]



defns
SplitType :: '' ::=

defn
split m A B C :: :: spl :: Sp_
{{ com Splittable Types }}
{{ tex [[B]] \mathbin{\lhd}_{[[m]]} [[A]] \mathbin{\rhd}_{[[m]]} [[C]] }}
% {{ tex [[B]] \mathbin{\LHD} [[A]] \mathbin{\RHD} [[C]] }}
by


-----------------------:: and
split m [A m B] A B


split sub B C D
---------------------------- :: arrow
split sub A->B A->C A->D


ordinary sub D
split super A B C
-------------------------- :: arrowUnion
split sub A->D B->D C->D


split m A A1 A2
--------------------------------------- :: orl
split m [A !m B] [A1 !m B] [A2 !m B]


ordinary m A
split m B B1 B2
--------------------------------------- :: orr
split m [A !m B] [A !m B1] [A !m B2]



defns
Subtyping :: '' ::=

defn
A <: mode :> B  :: :: sub :: S_
{{ com Algorithmic Subtyping }}
{{ tex [[A]] :[[mode]]: [[B]] }}
by


---------------------- :: int
int <: mode :> int


---------------------- :: top
A <: mode :> |mode|


---------------------- :: bot
|!mode| <: mode :> A


%ordinary !mode D
%ordinary mode C
split mode D A B
A <: mode :> C
------------------------- :: andl
D <: mode :> C


%ordinary !mode D
%ordinary mode C
split mode D A B
B <: mode :> C
----------------- :: andr
D <: mode :> C


%ordinary !mode D
%ordinary mode C
split !mode C A B
D <: mode :> A
------------------------- :: orl
D <: mode :> C


%ordinary !mode D
%ordinary mode C
split !mode C A B
D <: mode :> B
----------------- :: orr
D <: mode :> C

ordinary !mode A -> C
ordinary mode B -> D
A <: !mode :> B
C <: mode :> D
------------------------ :: arr
A -> C <: mode :> B -> D


% ordinary mode D
split !mode A B C
B <: mode :> D
C <: mode :> D
--------------- :: or
A <: mode :> D


split mode D B C
A <: mode :> B
A <: mode :> C
--------------- :: and
A <: mode :> D
